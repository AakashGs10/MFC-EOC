from ultralytics import YOLO
import cv2
import numpy as np
import time

model = YOLO("yolov8n-pose.pt")  
# Counter and stage
pushup_count = 0
stage = "up"
last_time = 0
cooldown = 0.5  # seconds

# Calculate angle between three points
def calculate_angle(a, b, c):
    a, b, c = np.array(a), np.array(b), np.array(c)
    ba = a - b
    bc = c - b
    cosine_angle = np.dot(ba, bc) / (np.linalg.norm(ba) * np.linalg.norm(bc) + 1e-6)
    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
    return np.degrees(angle)

# Detect push-up stage and count
def detect_pushup(kps):
    global pushup_count, stage, last_time

    current_time = time.time()

    # Use average of left and right elbows
    left_elbow_angle = calculate_angle(kps[5], kps[7], kps[9])   # L-shoulder, elbow, wrist
    right_elbow_angle = calculate_angle(kps[6], kps[8], kps[10]) # R-shoulder, elbow, wrist
    avg_elbow_angle = (left_elbow_angle + right_elbow_angle) / 2

    if avg_elbow_angle < 90 and stage == "up":
        stage = "down"

    elif avg_elbow_angle > 160 and stage == "down":
        if current_time - last_time > cooldown:
            stage = "up"
            pushup_count += 1
            last_time = current_time

    return int(avg_elbow_angle), f"Push-Ups: {pushup_count}"

# Webcam loop
def process_webcam():
    cap = cv2.VideoCapture(0)
    while True:
        ret, frame = cap.read()
        if not ret: break

        results = model(frame)

        for result in results:
            if result.keypoints is not None and len(result.keypoints.xy) > 0:
                kps = result.keypoints.xy[0].cpu().numpy()
                elbow_angle, label = detect_pushup(kps)

                annotated = result.plot()

                # Show elbow angle
                mid_elbow = ((kps[7] + kps[8]) / 2).astype(int)
                cv2.putText(annotated, f"{elbow_angle}Â°", tuple(mid_elbow),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.8, (100, 255, 200), 2)

                # Show push-up count
                cv2.putText(annotated, label, (30, 50),
                            cv2.FONT_HERSHEY_SIMPLEX, 1.2, (255, 100, 100), 3)

                cv2.imshow("Push-Up Counter", annotated)
            else:
                cv2.imshow("Push-Up Counter", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'): break

    cap.release()
    cv2.destroyAllWindows()

if _name_ == "_main_":
    process_webcam()